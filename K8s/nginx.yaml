# -----------------------
#  Nginx NodePort Service
# -----------------------
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: dev
  labels:
    app: nginx
spec:
  type: NodePort
  selector:
    app: web
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080
    nodePort: 30000
---

# -----------------------
#  Nginx ConfigMap(s)
# -----------------------
# Pour permettre la mise à jour de la conf depuis le repo de code, on crée le ConfigMap à partir du fichier local
# kubectl create configmap nginx-conf ne peut pas être appliqué si le ConfigMap existe déjà
# on utilise alors une astuce avec --dry-run=client et -o yaml pour générer le manifeste
# puis l'appliquer avec kubectl apply -f -

#  --dry-run=client -o yaml → génère le YAML sans le créer
#  | kubectl apply -f - → applique la mise à jour sur le ConfigMap existant
    
  # kubectl create configmap nginx-conf --from-file=default.conf=nginx_config.conf --dry-run=client -o yaml | kubectl apply -f - -n dev
  # kubectl create configmap nginx-index --from-file=index.html --dry-run=client -o yaml | kubectl apply -f - -n dev

# -----------------------
#  Nginx Deployment
# -----------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: dev
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        volumeMounts:
        - mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
          name: nginx-conf-volume
        - mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
          name: nginx-index-volume
      volumes:
      - name: nginx-conf-volume
        configMap:
          name: nginx-conf
      - name: nginx-index-volume
        configMap:
          name: nginx-index
---
      